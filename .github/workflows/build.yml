name: Build Apica Compiler

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies and build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential
          make build EXT="" OPTIONS="-O2 -std=c++23" OUTPUT=""
    
      - name: Install dependencies and build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install make mingw -y
          make build OPTIONS="-O2 -std=c++23" OUTPUT=""
    
      - name: Install dependencies and build (MacOS)
        if: matrix.os == 'macos-latest'
        run: | 
          brew install make
          make build EXT="" COMP=clang++ OPTIONS="-O2 -std=c++23" OUTPUT=""
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: build/*

  release:
    name: Create release if not exists
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version from main file
        id: version
        run: |
          VERSION=$(grep -oP 'VERSION:\s*\K[0-9]+\.[0-9]+' src/main.cpp)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        
      - name: Check if release exists
        id: check
        run: |
          if gh release view "v${{ steps.version.outputs.version }}" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create release
        if: steps.check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag-name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            Release generated automatically.
          files: ./artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}